#!/bin/bash

# TODO
# 
# vérifier la présence des dépendances
#
# implémenter les options: display ; add ; edit ; delete ; init ; list ; help
#
# init: première commande à lancer, doit enregistrer les préférences utilisateur (emplacement du fichier, clé PGP, phrase de passe) dans un fichier de config
# 	Si aucun fichier de préférence de l'utilisateur n'est trouvé à l'appel du script, init est exécuté
# 
# display: afficher le fichier de mots de passe déchiffré
#
# add: ajouter une entrée
#
# edit: modifier une entrée
#
# delete: supprimer une entrée
#
# ajouter un trap pour supprimer le fichier déchiffré en cas d'interruption du processus principal (Ctrl-C)
#
# regarder quelles sont les variables d'environnement cygwin
# vérifier les implémentations getopt de cygwin
# lister les dépendances: gnupg2
#
# $HOME/.password-store/config		fichier de config utilisateur
# $HOME/.password-store/database	répertoire de stockage des mots de passe (défaut)
#


directory="$HOME/.password-store"
config_file="$directory/config"



function check_config () {
	if [ ! -r $config_file ] ; then
		read -p "Fichier de configuration $config_file non trouvé, initialiser ? (O/N) " answer
		case ${answer^^} in
			"O") init ;;
			"N") echo "Sortie." ; exit 0 ;;
			*) echo "Réponse non attendue. Sortie." ; exit 1 ;;
		esac
	else
		. $config_file
		if [ -z $pass_storage ] ; then
			read -p "Emplacement de stockage des mots de passe non défini. Définir ? (O/N) " answer
			case ${answer^^} in
				"O") read -p "Chemin du répertoire de stockage des mots de passe: (laisser vide pour utiliser la valeur par défaut ~/.password-store/data) " chemin ;
					echo "pass_storage=$chemin" >> $config_file && echo "OK" ;;
				"N") echo "Sortie." ; exit 0 ;;
				*) echo "Réponse non attendue. Sortie." ; exit 1 ;;
			esac
		fi
		if [ -z $key_id ] ; then 
			read -p "La clé PGP n'est pas définie. Définir ? (O/N) " answer
			case ${answer^^} in 
				"O") read -p "Identifiant de la clé PGP: " clef ;
					echo "key_id=$clef" >> $config_file && echo "OK" ;;
				"N") echo "Sortie." ; exit 0 ;;
				*) echo "Réponse non attendue. Sortie." ; exit 1 ;;
			esac
		fi
		. $config_file
	fi	
}

function list () {
	check_config
	echo -e "Liste des mots de passe enregistrés:\n"
	ls -1 $pass_storage | awk -F".gpg" '{print $1}'
	exit 0
}

function init () {
	mkdir -p $directory
	read -p "Identifiant de la clé servant à (dé)chiffrer les mots de passe: " key_id
	if [ $(gpg2 --list-keys | grep uuid | grep -c "$key_id") -lt 1 ] ; then
		echo "Attention: aucune clé PGP trouvée avec l'identifiant $key_id"
		read -p "Créer une clé PGP avec l'identifiant $key_id ? (O/N) " answer
		case ${answer^^} in
			"O") echo -e "Création de la clé...\n" ;
				gpg2 --quick-gen-key "$key_id" ;;
			"N") echo "Sortie." ; exit 0 ;;
			*) echo "Réponse non attendue. Sortie." ; exit 1 ;;
		esac
	fi
	read -p "Répertoire pour les mots de passe chiffrés (par défaut: ~/.password-store/data): " pass_storage
	if [ -z "$pass_storage" ] ; then pass_storage="$directory/data" ; fi
	echo "key_id=$key_id" > $config_file
	echo "pass_storage=$pass_storage" >> $config_file
	mkdir -p "$pass_storage"
}

function display () {
	check_config
	if [ $# -lt 1 ] || [ -z $1 ] ; then echo "Erreur: donner en argument le nom de l'entrée à afficher. Sortie." ; exit 1 ; else entry="$1" ; fi
	gpg2 -d "$pass_storage"/"$entry".gpg
	exit 0
}

function add () {
	check_config
	if [ $# -eq 1 ] ; then
		entry="$1"
	else
		read -p "Nom de la nouvelle entrée: " entry
	fi
	password=0
	password2=1
	until [ "$password" = "$password2" ] ; do
		read -s -p "Entrer le mot de passe associé: " "password"
		echo ""
		read -s -p "Confirmer le mot de passe: " "password2"
		echo ""
		if [ "$password" != "$password2" ] ; then echo "Erreur: les deux mots de passe ne concordent pas" ; fi
	done
	echo "$password" > "$pass_storage"/"$entry"
	gpg2 -r "$key_id" -e "$pass_storage"/"$entry" && rm "$pass_storage"/"$entry" && echo "OK"
	exit 0
}

function edit () {
	check_config
	if [ $# -ne 1 ] || [ -z $1 ] ; then echo "Erreur: donner en argument le nom de l'entrée à éditer. Sortie." ; exit 1 ; else entry="$1" ; fi
	if [ ! -e "$pass_storage"/"$entry.gpg" ] ; then echo "Aucune entrée correspondante trouvée dans $pass_storage. Sortie." ; exit 1 ; fi
	gpg2 -o /tmp/"$entry" -d "$pass_storage"/"$entry.gpg" 2>/dev/null 
	password="$(cat /tmp/${entry})"
 	read -p "Saisir le nouveau nom de l'entrée (laisser vide pour laisser la valeur): " new_entry
	if [ -z "$new_entry" ] ; then new_entry="$entry" ; fi
	mv /tmp/"$entry" /tmp/"$new_entry"
	read -s -p "Saisir le nouveau mot de passe (laisser vide pour conserver l'actuel): " new_password
	echo ""
	if [ -z "$new_password" ] ; then 
		new_password="$password"
	else
		new_password2="1"
		until [ "$new_password" = "$new_password2" ] ; do
			read -s -p "Confirmer le nouveau mot de passe: " new_password2
			if [ "$new_password" != "$new_password2" ] ; then echo "Erreur: les mots de passe ne correspondent pas". ; fi
		done
	fi
	echo "$new_password" > /tmp/"$new_entry"
	gpg2 -r "$key_id" -o "$pass_storage"/"$new_entry".gpg -e /tmp/"$new_entry" && rm "$pass_storage"/"$entry".gpg && echo "OK"
	rm /tmp/"$new_entry"
	exit 0
} 

function delete () {
	check_config
	if [ $# -ne 1 ] || [ -z $1 ] ; then echo "Erreur: donner en argument le nom de l'entrée à supprimer. Sortie." ; exit 1 ; else entry="$1" ; fi
	if [ ! -e "$pass_storage"/"$entry.gpg" ] ; then echo "Aucune entrée correspondante trouvée dans $pass_storage. Sortie." ; exit 1 ; fi
	read -p "Supprimer l'entrée $entry ? (O/N) " answer
	case ${answer^^} in
		"O") rm "$pass_storage"/"$entry.gpg" && echo "OK" ; exit 0 ;;
		"N") echo "Sortie." ; exit 0 ;;
		*) echo "Réponse non attendue. Sortie." ; exit 1 ;;
	esac
}

function printhelp () {
	echo -e "\t$(basename $0)\tGérer de manière chiffrée un ensemble de mots de passe"
	echo -e "Usage:\t$(basename $0) [list|help|init[display|add|edit|delete <Entry>]]"
	echo -e "Commandes:"
	echo -e "list\t\tLister les entrées enregistrées"
	echo -e "help\t\tAffiche cette aide"
	echo -e "init\t\tInitialise le trousseau de mots de passe et sa configuration"
	echo -e "display <Entry>\tAffiche le mot de passe de l'entrée Entry"
	echo -e "add <Entry>\tAjouter une entrée au trousseau"
	echo -e "edit <Entry>\tModifier une entrée"
	echo -e "delete <Entry>\tSupprimer une entrée du trousseau"
	echo -e "\nNOTE IMPORTANTE: <Entry> ne doit pas contenir d'espaces"
	exit 0
}




# 1er contrôle d'argument
if [ $# -lt 1 ] || [ $# -gt 2 ] ; then printhelp ; fi

# contrôle des dépendances
verif=1
for binaire in gpg2 ; do
	if [ ! $(which $binaire 2>/dev/null) ] ; then verif=0 ; echo "Erreur: $binaire ne semble pas installé" ; fi
done
if [ $verif -eq 0 ] ; then echo "Sortie." ; exit 1 ; fi

# Evaluation de la commande
case $1 in
	"list") list ;;

	"help") printhelp ;;

	"init") init ;;

	"display") entry="$2" ; display "$entry" ;;

	"add") entry="$2" ; add "$entry" ;;

	"edit") entry="$2" ; edit "$entry" ;;

	"delete") entry="$2" ; delete "$entry" ;;

	*) echo -e "Erreur. Commande non reconnue: $1\n" ; printhelp ;;

esac
